Nota: quizá quiera consultar el significado de manín
	  en el diccionario de americanismos


La bomba requiere de dos claves para desencriptarla, una contraseña y un pin
numérico. Cada uno se descifra de una manera diferente.
La contraseña es ant.CA?A$ (cifrada $R?RT.ker) ý el pin 1968 (cifrado 102341)

********************************************************************************

La contraseña tiene dos cifrados, primero se espeja, y luego se le aplica un
cifrado del césar clave 17.

Para obtener la contraseña cifrada, podemos usar la orden
	$ strings -d ./bombaExplosiva
para obtener todos los strings que hay, y tiene que estar entre ellos.
Encontramos varias palabras, algunos códigos en binario... Y al final la cadena
$R?RT.ker, que es la contraseña encriptada.
Claro, "asumir que es $R?RT.ker aunque puede que no lo sea" no es buena praxis,
y aquí es donde entra el verdadero método de desencriptado, ejecutar
	$ ltrace -i ./bombaExplosiva  #ltrace hay que instalarla
si te da error, amigo, es que tienes que ponerle séachemod
	$ chmod +x bombaExplosiva
te permite ver cómo se encripta la cadena con la que pruebas. Probamos con la
cadena, por ejemplo, AAAAAAA, y el programador debe de comer mucho arroz, porque
esto está en chino. Pero entre todo este código, encontramos esta linea amiga
	[0x401539] strncmp("RRRRRRR\n", "$R?RT.ker\n", 11) = 78
Encontramos de nuevo $R?RT.ker, confirmamos que es la contraseña encriptada. Esa
linea compara RRRRRRR con $R?RT.ker, así que el algoritmo de codificación hace
	AAAAAAA ---> RRRRRRR

Es hora de demostrar que has jugado al Profesor Layton.

Pruebas varias letras y símbolos y llegas a la conclusión de que desplaza las
letras, en el alfabeto y no en el código ASCII, diecisiete posiciones
sin contar la Ñ.
Haces
	$R?RT.ker ---> $A?AC.tna
Y... no es la contraseña.
Te pones a probar patrones, y ves el siguiente comportamiento
	ABCDEFG  ---> RSTUVWX --(-17 posiciones)--> GFEDCBA
También le da la vuelta. Entonces, la contraseña es...
	$R?RT.ker ---> ant.CA?A$

Pero, AMIGO, aún no has salvado a CA?AS, queda todavía el pin.

********************************************************************************

Ahora se viene lo chido.
Tenemos que hacer uso de GDB. Tranquilo manín, que el departamento de
electrónica no le ha metido mano a esto, que lo hacen los gringos.
Primero desensamblamos el código, usando la buena orden
	$ objdump -d bombaExplosiva
y estudiamos el resultado. El hombre sabio encontrará lo siguiente
	00000000004011e2 <fivdlErtzwzuft>:
	  4011e2:	6b c7 34             	imul   $0x34,%edi,%eax
	  4011e5:	83 c0 05             	add    $0x5,%eax
	  4011e8:	c3                   	retq
y dirá
-¿fivdlErtzwzuft? ¿Será el mismo cifrado de antes?
y lo descifrará, y verá que la función se llama codificaNumero.
Si no lo ves, pues hay que hacer un breakpoint cuando te pide el pin e ir
avanzando instrucciones hasta que veas que salta a la función, y ya sabes en que
dirección está. Y le haces un breakpoint y ya está manín.

Verá que nomás esto multiplica lo que le entra a la función por $0x34, y le suma
$0x5
Abres bombaExplosiva con GDB
	$ gdb bombaExplosiva
Ahora esto está bien fresquito, añades tu breakpoint cuando empieza la fº
	(gdb) br fivdlErtzwzuft #Si no sabes, $ es la consola del user de linux,
							#y ahora (gdb), pues comandos de gdb. Tu sigue
							#poniendo comandos que los coje gdb hasta que pongas
							# quit
te pones la consola bien chula, enseñando registros y código en ensamblador
	(gdb) layout asm
	(gdb) layout regs
ejecutas el programa
	(gdb) run
metes la buena contraseña, metes un pin elegido con cabeza, y estamos en el
break point. Queremos sacar dos cosas, los valores de $0x34 ý $0x5.
 Para sacar la suma, pones como pin el 0
(porque 0 por $0x34 es cero, cuando le sumes $0x5 te va a quedar valor de $0x5),
y teniendo la suma pues pones de pin el 1 y ya tienes la multiplicación.
Pero se puede hacer en un solo paso, como pone abajo.
El caso, metes de pin el 1.

¿Cómo sacas los valores? Ez, nomás haces
	(gdb) ni
para avanzar una instrucción. Se acaba de ejecutar imul   $0x34,%edi,%eax
así que el valor de %rax es el valor de lo que multiplica.
Y uno por algo es ese algo manín. Ya sabes que lo que metes se multiplica por 52
Ahora haces
	(gdb) ni
y se acaba de ejecutar  add    $0x5,%eax
%rax vale lo de antes más algo. Increíble ecuación que te queda manín
57=52+x
No aprobé álgebra, pero creo que da 5.
Sabemos que al pin que metes, se le multiplica por 52 y se le suma cinco.
Ahora tenemos que obtener lo que vale el pin encriptado y ya está. Easy.
Avanzas nosecuántas (2) instrucciones hasta que veas una comparación,
estás buscando esto
	cmp    0x2a17(%rip),%eax        # 0x404060 <passcode>
y ya lo tienes manín, el código se guarda en 0x404060, haces ahí
	(gdb) p{int} 0x404060
para sacarlo, y te contesta al toque
	$1 = 102341
Y ahí lo tienes manín. Aplicas las operaciones contrarias en desorden
	(calculadora) (102341-5)/52
y te da 1968. Ez kill.

Y tienes ant.CA?A$ ý 1968. Te sales de GDB, ejecutas el bombaExplosiva con
	./bombaExplosiva
y rescatas a antonio CA?AS VARGAS de la bomba. Bastante fresquito, solo ha
muerto un par de veces.





HaSta luego, y gracias por el pescado manín.
